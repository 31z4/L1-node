---
- name: Bootstrap playbook
  tags: bootstrap
  hosts: all
  # https://stackoverflow.com/questions/32297456/how-to-ignore-ansible-ssh-authenticity-checking/54735937#54735937
  # Don't gather facts automatically because that will trigger
  # a connection, which needs to check the remote host key
  gather_facts: false
  tasks:
  - name: Check known_hosts for {{ inventory_hostname }}
    delegate_to: localhost
    ansible.builtin.command: ssh-keygen -F {{ inventory_hostname }}
    register: has_entry_in_known_hosts_file
    changed_when: false
    ignore_errors: true
  - name: Ignore host key for {{ inventory_hostname }} on first run
    when: has_entry_in_known_hosts_file.rc == 1
    set_fact:
      ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
  # Now that we have resolved the issue with the host key
  # we can "gather facts" without issue
  - name: Set authorized keys for the host
    ansible.posix.authorized_key:
      user: "{{ ansible_user }}"
      state: present
      key: "{{ lookup('file', '../authorized_keys') }}"

- name: Configure playbook
  tags: config
  hosts: all
  gather_facts: true
  vars:
    packages:
      containerd:
        CentOS: containerd.io
        Debian: containerd
        Ubuntu: containerd
      docker_compose:
        CentOS: docker-compose
        Debian: docker-compose
        Ubuntu: docker-compose
      docker:
        CentOS: docker-ce
        Debian: docker.io
        Ubuntu: docker.io
      pip:
        CentOS: python3-pip.noarch
        Debian: python3-pip
        Ubuntu: python3-pip
  tasks:
  - name: Add docker repository
    become: true
    become_user: root
    # ref - https://www.ansiblepilot.com/articles/install-docker-in-redhat-like-systems-ansible-module-rpm_key-yum_repository-and-yum/
    ansible.builtin.yum_repository:
      name: docker
      description: docker repository to CentOS
      baseurl: "https://download.docker.com/linux/centos/$releasever/$basearch/stable"
      enabled: true
      gpgcheck: true
      gpgkey: "https://download.docker.com/linux/centos/gpg"
      state: latest
    when: ansible_distribution == "CentOS"
  - name: Install aptitude
    become: true
    become_user: root
    ansible.builtin.package:
      name:
      - aptitude
      update_cache: true
    when: ansible_distribution in ["Debian", "Ubuntu"]
  - name: Install dependencies
    become: true
    become_user: root
    ansible.builtin.package:
      name:
      - wget
      - "{{ packages.containerd[ansible_distribution] }}"
      - "{{ packages.docker[ansible_distribution] }}"
      - "{{ packages.docker_compose[ansible_distribution] }}"
      - "{{ packages.pip[ansible_distribution] }}"
      state: latest
      update_cache: true
  - name: Install python packages
    become: true
    become_user: root
    ansible.builtin.pip:
      executable: pip3
      name:
      - docker>5.0.0
      state: present
  - name: Start docker
    become: true
    become_user: root
    ansible.builtin.service:
      name: docker
      enabled: true
      state: started

- name: Harden playbook
  tags: harden
  hosts: all
  collections:
  - devsec.hardening
  roles:
  - role: os_hardening
    become: true
  - role: ssh_hardening
  - role: geerlingguy.firewall
  become: true
  vars:
    sysctl_overwrite:
      # Enable IPv4 traffic forwarding for docker
      net.ipv4.ip_forward: 1
    # Enabling ssh root login is not recommended.
    # It's only left here, as it might be necessary in particular scenarios
    ssh_permit_root_login: "{{ 'yes' if ansible_user == 'root' else 'no' }}"
    firewall_allowed_tcp_ports:
    - "22"
    - "80"
    - "443"

- name: Run playbook
  tags: run
  hosts: all
  vars:
    # this wasn't consistent between runs, so we need to store it
    homedir: "{{ ansible_env.HOME }}"
    saturn_home: "{{ saturn_root if saturn_root is defined else homedir }}"
    env_file: "{{ lookup('file', '../.env' ) }}"
    # ref - https://stackoverflow.com/questions/60209185/ansible-environment-variables-from-env-file
    var_regex: "([^=]*)=(['\"]?.*['\"]?)"
    env_vars: "{{ env_file.split('\n') | select | map('regex_replace', var_regex, '{\"key\": \"\\1\", \"value\": \\2}') | map('from_json') }}"
  tasks:
  - name: Log the run config
    ansible.builtin.debug:
      var: env_vars
  - name: Ensure we have the expected config files
    become: true
    become_user: root
    ansible.builtin.file:
      path: "{{ item }}"
      state: touch
      access_time: preserve
      modification_time: preserve
    loop:
    - /etc/environment
    - "{{ homedir }}/.bashrc"
  - name: Set L1 container env
    become: true
    become_user: root
    blockinfile:
      dest: "{{ item.0 }}"
      block: export {{ item.1.key }}={{ item.1.value }}
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.1.key }}"
    with_nested:
    - [/etc/environment, "{{ homedir }}/.bashrc"]
    - "{{ env_vars }}"
  - name: Get the L1 run.sh script
    become: true
    become_user: root
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/filecoin-saturn/L1-node/main/run.sh
      # url: https://raw.githubusercontent.com/AnomalRoil/L1-node/main/run.sh
      dest: "{{ homedir }}/run.sh"
      mode: +x
    register: run_script
  - name: Get docker-compose.yml
    become: true
    become_user: root
    ansible.builtin.get_url:
      # url: https://raw.githubusercontent.com/filecoin-saturn/L1-node/main/docker-compose.yml
      url: https://raw.githubusercontent.com/AnomalRoil/L1-node/main/docker-compose.yml
      dest: "{{ homedir }}/docker-compose.yml"
    register: docker_compose
  - name: Get update.sh
    become: true
    become_user: root
    ansible.builtin.get_url:
      url: https://raw.githubusercontent.com/filecoin-saturn/L1-node/main/update.sh
      # url: https://raw.githubusercontent.com/AnomalRoil/L1-node/main/update.sh
      dest: "{{ homedir }}/update.sh"
  - name: Ensure we have the right $SATURN_HOME/shared permissions
    become: true
    become_user: root
    ansible.builtin.file:
      path: "{{ saturn_home }}/shared"
      mode: '0755'
      state: directory
  - name: Check the L1 container
    become: true
    become_user: root
    community.docker.docker_container_info:
      name: saturn-node
    register: saturn_container
  - name: Run the L1 container
    become: true
    become_user: root
    ansible.builtin.command: "{{ homedir }}/run.sh"
    environment: "{{ env_vars | items2dict }}"
    when: run_script.changed or docker_compose.changed or not saturn_container.exists
